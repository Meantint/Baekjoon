<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Baekjoon on Meantint&#39;s BLog</title>
    <link>https://meantint.github.io/tags/baekjoon/</link>
    <description>Recent content in Baekjoon on Meantint&#39;s BLog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Wed, 19 Aug 2020 13:42:25 +0900</lastBuildDate>
    
	<atom:link href="https://meantint.github.io/tags/baekjoon/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>BOJ 2169 - 로봇 조종하기</title>
      <link>https://meantint.github.io/post/2020/08/boj_2169/</link>
      <pubDate>Wed, 19 Aug 2020 13:42:25 +0900</pubDate>
      
      <guid>https://meantint.github.io/post/2020/08/boj_2169/</guid>
      <description>[BOJ_2169 - 로봇 조종하기]
 정말 많이 생각하고 힘들게 풀었다. 원래 푼 방식이 맞다고 생각이 들어서 고집을 부렸는데 그 방법은 아니었다.
풀이   dp[i][j][k] = k 방향으로 들어와서 (i, j)에 들어왔을 때의 최댓값
  3가지 경우가 있다.
  왼쪽에서 들어왔을 때
 ret = max(dfs(x, y + 1, 0), dfs(x + 1, y, 2)) 실행    오른쪽에서 들어왔을 때:
 ret = max(dfs(x, y - 1, 1), dfs(x + 1, y, 2)) 실행    위쪽에서 들어왔을 때:</description>
    </item>
    
    <item>
      <title>BOJ 1000 - A&#43;B</title>
      <link>https://meantint.github.io/post/2020/08/boj_1000/</link>
      <pubDate>Mon, 17 Aug 2020 23:28:57 +0900</pubDate>
      
      <guid>https://meantint.github.io/post/2020/08/boj_1000/</guid>
      <description>[BOJ_1000 - A+B]
풀이  &amp;hellip;?  Code #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; int main() { int a, b; cin &amp;gt;&amp;gt; a &amp;gt;&amp;gt; b; cout &amp;lt;&amp;lt; a + b &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;; return 0; } </description>
    </item>
    
    <item>
      <title>BOJ 9252 - LCS 2</title>
      <link>https://meantint.github.io/post/2020/08/boj_9252/</link>
      <pubDate>Sun, 09 Aug 2020 16:42:18 +0900</pubDate>
      
      <guid>https://meantint.github.io/post/2020/08/boj_9252/</guid>
      <description>[BOJ_9252 - LCS 2]
풀이  str1[i] == str2[j]  dp[i][j] = dp[i - 1][j - 1] + 1   str1[i] != str2[j]  dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])      위의 조건식을 문자열이 저장되어 있는 dp[i][j].second도 그대로 따른다.
  이중 for문 안의 else에 등호를 &amp;gt;=가 아닌 &amp;gt;로 바꾸면 dp의 값이 달라져서 답이 달라질 수있다. 하지만 문제에 이렇게 명시되어 있기 때문에 신경쓰지 않아도 될 것 같다.</description>
    </item>
    
    <item>
      <title>BOJ 14502 - 연구소</title>
      <link>https://meantint.github.io/post/2020/07/boj_14502/</link>
      <pubDate>Thu, 23 Jul 2020 01:29:07 +0900</pubDate>
      
      <guid>https://meantint.github.io/post/2020/07/boj_14502/</guid>
      <description>[BOJ_14502 - 연구소]
 Brute Force로 해결하였다. 문제에서 제시된 2차원 배열의 범위가 작아서 시간 복잡도가 꽤 여유롭다.
풀이   벽을 3칸 치는 작업을 완전탐색을 이용하여 한다.
  벽을 3칸 쳤다면 바이러스를 벽이 없는 사방으로 퍼뜨리는 virus()를 호출한다.
  호출한 후 안전영역의 개수를 구한 후, 기존에 저장되어 있는 값과 비교하여 갱신해준다.
  Code #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; int answer = -1; int safeArea; int n, m; void virus(int i, int j, vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; vec) { if (i &amp;lt; 0 || i &amp;gt;= n || j &amp;lt; 0 || j &amp;gt;= m) return; if (vec[i][j] !</description>
    </item>
    
    <item>
      <title>BOJ 1654 - 랜선 자르기</title>
      <link>https://meantint.github.io/post/2020/07/boj_1654/</link>
      <pubDate>Thu, 23 Jul 2020 00:56:42 +0900</pubDate>
      
      <guid>https://meantint.github.io/post/2020/07/boj_1654/</guid>
      <description>[BOJ_1654 - 랜선 자르기]
 이분탐색을 이용하여 풀었다. sum &amp;gt;= n인 경우 start값을 어떻게 주어야 하는지 많은 생각을 해서 오래 걸렸다.
풀이   mid값은 (start + end) / 2인데, start는 1, end는 랜선의 길이 중 가장 큰 값이다.
  잘라서 나온 랜선의 개수가 n보다 크거나 같다면
  start = mid + 1을 해준다.
  만약 mid가 현재까지의 최대값 max보다 크다면 max를 mid값으로 바꿔준다.
  start의 값을 mid + 1로 바꿔주는데 만약 바꾸고 나서 랜선의 개수가 n보다 항상 작게 되면 정답을 도출할 수 없기 때문에 max값을 둬서 mid의 최대값을 저장해둔다.</description>
    </item>
    
    <item>
      <title>BOJ 1043 - 거짓말</title>
      <link>https://meantint.github.io/post/2020/07/boj_1043/</link>
      <pubDate>Fri, 17 Jul 2020 16:05:00 +0900</pubDate>
      
      <guid>https://meantint.github.io/post/2020/07/boj_1043/</guid>
      <description>[BOJ_1043 - 거짓말]
 2차원 배열을 만들어서 진실을 아는 사람과 파티로 연결된 사람들을 모두 제거하는 방식으로 문제를 풀었는데, 다른 사람들의 대부분은 Union_Find를 이용하여 풀었더라. Union_Find를 공부하자.
풀이     사람 -&amp;gt; 1 2 3 4     파티 ↓        1  1 1 0 0   2  0 0 1 0   3  0 1 1 1    파티, 사람간의 관계를 갖는 2차원 배열  만약 진실을 알고 있는 사람이 있다면, 그 사람이 들어간 파티 번호를 찾은 후, 2차원 배열에서 가로 세로로 이어진 모든 연결(value가 1인 값들의 연결)을 제거한다.</description>
    </item>
    
    <item>
      <title>BOJ 1027 - 고층 건물</title>
      <link>https://meantint.github.io/post/2020/07/boj_1027/</link>
      <pubDate>Thu, 16 Jul 2020 17:50:20 +0900</pubDate>
      
      <guid>https://meantint.github.io/post/2020/07/boj_1027/</guid>
      <description>[BOJ_1027 - 고층 건물]
 왼쪽으로 탐색하는 부분에서 기울기 때문에 잠시 고민했다.
그리고 굳이 vec를 vector&amp;lt;PII&amp;gt; type으로 할 필요가 없다. vec[idx].first = idx이기 때문에.. PII = pair&amp;lt;int, int&amp;gt;
풀이    i 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14     Height 1 5 3 2 6 3 2 6 4 2 5 7 3 1 5    건물의 위치(i)와 높이(Height)  vec[i].</description>
    </item>
    
    <item>
      <title>BOJ 1038 - 감소하는 수</title>
      <link>https://meantint.github.io/post/2020/07/boj_1038/</link>
      <pubDate>Tue, 14 Jul 2020 21:37:04 +0900</pubDate>
      
      <guid>https://meantint.github.io/post/2020/07/boj_1038/</guid>
      <description>[BOJ_1038 - 감소하는 수]
 낚시하려고 만든건지 N값이 쓸데없이 크다.
감소하는 수의 가장 큰 수인 9876543210이 N = 1022이기 때문에..
풀이  i + 1번째 자릿수의 값이 j일 때 나오는 경우의 수를 저장해놓는 vec 변수를 선언하였다.     i, j 0 1 2 3 4 5 6 7 8 9     0 1 1 1 1 1 1 1 1 1 1   1 0 1 2 3 4 5 6 7 8 9   2 0 0 1 3 6 10 15 21 28 36   3 0 0 0 1 4 10 20 35 56 84   4 0 0 0 0 1 5 15 35 70 126   5 0 0 0 0 0 1 6 21 56 126   6 0 0 0 0 0 0 1 7 28 84   7 0 0 0 0 0 0 0 1 8 36   8 0 0 0 0 0 0 0 0 1 9   9 0 0 0 0 0 0 0 0 0 1    vec[i][j] : i + 1번째 자릿수가 j일 때 만들 수 있는 모든 경우의 수(i + 1이 제일 큰 자릿수)  vec[i][j] = vec[i - 1][0] + vec[i - 1][1] + &amp;hellip; + vec[i - 1][j - 1]</description>
    </item>
    
    <item>
      <title>BOJ 1022 - 소용돌이 예쁘게 출력하기</title>
      <link>https://meantint.github.io/post/2020/07/boj_1022/</link>
      <pubDate>Tue, 14 Jul 2020 19:50:29 +0900</pubDate>
      
      <guid>https://meantint.github.io/post/2020/07/boj_1022/</guid>
      <description>[BOJ_1022 - 소용돌이 예쁘게 출력하기]
 생각보다 간단하게 풀었다.
풀이   위치의 row, col 값을 저장하는 vec 변수를 선언.
  위치에 해당하는 값을 answer 변수의 각 위치에 넣음
  소용돌이 모양에서의 홀수 제곱수의 위치와 짝수 제곱수의 위치와 값은 특정한 규칙이 있다.
 홀수 제곱수 : (n, n)에 위치, (2n + 1)^2 짝수 제곱수 : (-n, -n + 1)에 위치, (2n)^2    홀수/짝수 제곱수 위치를 제외한 나머지 위치의 값은 (0, 0)에서 얼마나 떨어져 있는지를 이용하여 계산하였다.</description>
    </item>
    
    <item>
      <title>BOJ 1041 - 주사위</title>
      <link>https://meantint.github.io/post/2020/07/boj_1041/</link>
      <pubDate>Sun, 12 Jul 2020 02:12:25 +0900</pubDate>
      
      <guid>https://meantint.github.io/post/2020/07/boj_1041/</guid>
      <description>[BOJ_1041 - 주사위]
 처음에 주사위의 값들이 이동할 수 있다고 생각하고 6개의 값을 sort한 후에 풀었다..(당연히 그렇게 푸는거 아님)
풀이   5개의 면 중 3개의 면이 드러나는 주사위는 4개, 2개의 면이 드러나는 주사위는 8n - 12개,
1개의 면이 드러나는 주사위는 5n^2 - 16n + 12개이다.
  면이 3개인 주사위의 최소값 : 마주보는 면 중에서 더 작은 값들 3개의 합이 최소값이다.
  면이 2개인 주사위의 최소값 : 하나하나 다 해봄.</description>
    </item>
    
  </channel>
</rss>